#include <stdio.h>
#include <stdlib.h>
#include <string.h>

enum PhoneType {
  Celular = 1,
  Fixo,
  Residencia,
  Trabalho,
};

typedef struct {
  int day;
  int month;
  int year;
} Birthday;

typedef struct {
  char name[50];
  char phoneNumber[11];
  Birthday birthday;
  char email[25];
  enum PhoneType phoneType;
} Contact;

Contact contacts[20];
int contactsAmount = 0, sizeOfContacts = sizeof(contacts) / sizeof(contacts[0]);

int compareNames(char name[50]) {
  for (int i = 0; i < contactsAmount; i++) {
    if (strcmp(name, contacts[i].name) == 0) {
      return 1;
    }
  }
  return 0;
}

void grava() {
  system("clear");

  int option, optMail, optType;
  enum PhoneType type;

  printf("+-------------------------------------------+\n");
  printf("¦          ADICIONAR NOVO CONTATO           ¦\n");
  printf("+-------------------------------------------+\n\n");

  printf("Nome: ");
  scanf("%s", contacts[contactsAmount].name);

  int compareResult = compareNames(contacts[contactsAmount].name);

  if (compareResult == 1) {
    printf("\n============================================\n");
    printf("           Contato já cadastrado            \n");
    printf("============================================\n\n");

    return;
  }

  printf("Telefone: ");
  scanf("%s", contacts[contactsAmount].phoneNumber);

  printf("Qual o tipo de contato?\n \t[1] Celular\n \t[2] Fixo\n \t[3] "
         "Residencia\n \t[4] Trabalho\n");
  scanf("%d", &optType);

  switch (optType) {
  case 1:
    contacts[contactsAmount].phoneType = Celular;
    break;
  case 2:
    contacts[contactsAmount].phoneType = Fixo;
    break;
  case 3:
    contacts[contactsAmount].phoneType = Residencia;
    break;
  case 4:
    contacts[contactsAmount].phoneType = Trabalho;
    break;
  default:
    printf("Opção inválida\n");
  }

  printf("\nDeseja inserir a data de nascimento?\n");
  printf("[1] Sim\n[2] Não ");
  scanf("%d", &option);

  if (option == 1) {
    printf("\nInsira o dia (DD): ");
    scanf("%d", &contacts[contactsAmount].birthday.day);
    printf("Insira o mês (MM): ");
    scanf("%d", &contacts[contactsAmount].birthday.month);
    printf("Insira o ano (YYYY): ");
    scanf("%d", &contacts[contactsAmount].birthday.year);
  }

  printf("\nDeseja inserir um e-mail?\n");
  printf("[1] Sim\n[2] Não ");
  scanf("%d", &optMail);

  if (optMail == 1) {
    printf("\nE-mail: ");
    scanf("%s", contacts[contactsAmount].email);
  }

  system("clear");

  printf("============================================\n");
  printf("       ✔ Contato salvo com sucesso!         \n");
  printf("============================================\n\n");
  contactsAmount++;
}

void lista() {
  system("clear");

  int i;

  printf("+-------------------------------------------+\n");
  printf("¦             LISTA DE CONTATOS             ¦\n");
  printf("+-------------------------------------------+\n");

  for (i = 0; i < contactsAmount; i++) {
    printf("\nContato nº %d\n", i + 1);
    printf("--------------------------------------------\n");
    printf("Nome: %s\n", contacts[i].name);
    printf("Telefone: %s\n", contacts[i].phoneNumber);

    if (contacts[i].birthday.day != 0) {
      printf("Data de nascimento: %d/%d/%d\n", contacts[i].birthday.day,
             contacts[i].birthday.month, contacts[i].birthday.year);
    }

    if (strcmp(contacts[i].email, "") != 0) {
      printf("E-mail: %s\n\n", contacts[i].email);
    }

    // system("pause");
  }

  printf("\n=============================================\n");
  printf("                  FIM DA LISTA               \n\n\n");
}

void altera() {
  system("clear");

  char name[50];
  int i, found = 0;

  printf("+-------------------------------------------+\n");
  printf("¦              ALTERAR CONTATO              ¦\n");
  printf("+-------------------------------------------+\n\n");

  printf("Insira o nome do contato que deseja alterar: ");
  scanf("%s", name);

  for (i = 0; i < contactsAmount; i++) {
    if (strcmp(name, contacts[i].name) == 0) {
      printf("\n--------------------------------------------\n");
      printf("Alterando %s...\n", name);
      printf("Digite o novo número de telefone: ");
      scanf("%s", contacts[i].phoneNumber);

      found = 1;
      system("clear");

      printf("============================================\n");
      printf("      ✔ Contato alterado com sucesso!       \n");
      printf("============================================\n\n");

      break;
    }
  }

  if (!found) {
    system("clear");

    printf("============================================\n");
    printf("          Contato não encontrado!           \n");
    printf("============================================\n\n");
  }
}

void apaga() {
  system("clear");

  char name[50];
  int i, found = 0;

  printf("+-------------------------------------------+\n");
  printf("¦              EXCLUIR CONTATO              ¦\n");
  printf("+-------------------------------------------+\n\n");

  printf("Digite o nome do contato que deseja excluir: ");
  scanf("%s", name);

  for (i = 0; i < contactsAmount; i++) {
    if (strcmp(name, contacts[i].name) == 0) {
      found = 1;

      for (int j = i; j < contactsAmount - 1; j++) {
        strcpy(contacts[j].name, contacts[j + 1].name);
        strcpy(contacts[j].phoneNumber, contacts[j + 1].phoneNumber);
      }

      system("clear");

      printf("============================================\n");
      printf("     ✔ Contato excluído com sucesso!       \n");
      printf("============================================\n\n");

      contactsAmount--;
      break;
    }
  }

  if (!found) {
    printf("============================================\n");
    printf("          Contato não encontrado!           \n");
    printf("============================================\n\n");
  }
}

int compareContacts(const void *a, const void *b) {
  Contact *contactA = (Contact *)a;
  Contact *contactB = (Contact *)b;

  return strcmp(contactA->name, contactB->name);
}

void sortContacts() {
  int sizeOfContacts = contactsAmount;

  if (sizeOfContacts == 0) {
    printf("============================================\n");
    printf("      Não há contatos para ordenar.         \n");
    printf("============================================\n\n");
    return;
  }

  qsort(contacts, sizeOfContacts, sizeof(Contact), compareContacts);

  printf("============================================\n");
  printf("      ✔ Agenda ordenada com sucesso!        \n");
  printf("============================================\n\n");
}

void menu() {
  int option;

  do {
    printf("¦                    Menu                   ¦\n\n");
    printf("★ Contatos na sua agenda: %d\n\n", contactsAmount);
    printf("[1] Adicionar novo contato\n");
    printf("[2] Listar todos os contatos\n");
    printf("[3] Alterar contato\n");
    printf("[4] Apagar contato\n\n");
    printf("Outras opções:\n");
    printf("[5] Ordernar lista por nome\n");
    printf("[6] Sair da agenda\n\n");
    printf("Selecione a opção desejada: ");
    scanf("%d", &option);

    switch (option) {
    case 1:
      grava();
      break;
    case 2:
      lista();
      break;
    case 3:
      altera();
      break;
    case 4:
      apaga();
      break;
    case 5:
      sortContacts();
      break;
    case 6:
      printf("============================================\n");
      printf("      Agenda fechada. Até a próxima. =)     \n");
      printf("============================================\n\n");
      break;
    default:
      system("clear");
      printf("============================================\n");
      printf("      Opção inválida. Tente novamente.      \n");
      printf("============================================\n\n");
    }

  } while (option != 6);
}

int main() {
  printf("+-------------------------------------------+\n");
  printf("¦             AGENDA TELEFÔNICA             ¦\n");
  printf("+-------------------------------------------+\n\n");

  menu();
}
